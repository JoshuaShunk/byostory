// Generated by Xata Codegen 0.29.4. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "stories",
    columns: [
      { name: "name", type: "string", unique: true },
      { name: "story", type: "text" },
      { name: "isPublic", type: "bool" },
      { name: "description", type: "text" },
      { name: "wordCount", type: "int" },
      { name: "tags", type: "json" },
      { name: "userId", type: "string", notNull: true, defaultValue: "null" },
      { name: "slug", type: "string", notNull: true, defaultValue: "null" },
      { name: "views", type: "int", notNull: true, defaultValue: "0" },
    ],
  },
  {
    name: "story_views",
    columns: [
      { name: "storyId", type: "string", unique: true },
      { name: "userId", type: "string", notNull: true, defaultValue: "null" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Stories = InferredTypes["stories"];
export type StoriesRecord = Stories & XataRecord;

export type StoryViews = InferredTypes["story_views"];
export type StoryViewsRecord = StoryViews & XataRecord;

export type DatabaseSchema = {
  stories: StoriesRecord;
  story_views: StoryViewsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Joshua-Shunk-s-workspace-kcsc1j.us-west-2.xata.sh/db/byoStory",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
